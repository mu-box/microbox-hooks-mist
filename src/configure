#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

# ensure data directory exists
directory '/var/db/mist' do
  recursive true
end

# ensure the etc config directory exists
directory '/etc/mist' do
  recursive true
end

# generate the config file
template '/etc/mist/config.yml' do
  source 'mist/config.yml.erb'
  mode 0644
  variables ({ config: payload[:config] || {} })
  owner 'gomicro'
  group 'gomicro'
end

# configure narc
template '/opt/gomicro/etc/narc.conf' do
  variables ({
    uid: payload[:component][:uid], logvac: payload[:logvac_host]
  })
end
# ensure log files are created
["/var/log/gomicro/mist/current", "/var/log/mist.log"].each do |log_file|
  if not ::File.exists? "#{log_file}"
    parent = File.expand_path("..", "#{log_file}")
    
    # create the parent directory
    directory parent do
      owner 'gomicro'
      group 'gomicro'
      recursive true
    end
    
    # create the log_file
    file "#{log_file}" do
      owner 'gomicro'
      group 'gomicro'
      mode  0644
    end
  end
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end
